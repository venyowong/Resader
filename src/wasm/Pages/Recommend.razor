@page "/recommend"

@using Resader.Common.Api.Response
@using Resader.Common.Extensions
@using Resader.Wasm.Extensions

@inject NavigationManager nav
@inject HttpClient http
@inject JsService jsService

<div>
    <NavBar Brand="@label" BrandHref="@($"./recommend?label={label}")">
        @foreach (var l in _labels)
        {
            <NavBarItem Title="@l" Href="@($"./recommend?label={l}")" Click="() => ChangeLabel(l)"></NavBarItem>
        }
    </NavBar>

    <List>
        @foreach (var f in feeds)
        {
            <Card Image="@f.Feed.Image" Title="@f.Feed.Title" Summary="@f.Feed.Description" 
                Tip="@f.Article.Published.ToString("yyyy-MM-dd HH:mm:ss")" Click="@(() => ToFeed(f.Feed.Url))">
                <LinkItem Title="@f.Article.Title" Tip="new" TipBackground="danger"></LinkItem>
            </Card>
        }
    </List>
</div>

@code {
    private static readonly string[] _labels = new string[] { "资讯", "新闻", "动漫", "电影", "阅读", "科技", "金融", "软件", "游戏", "编程", "体育", "天文" };

    private string label = string.Empty;
    private List<RecommendedFeed> feeds = new List<RecommendedFeed>();

    protected override async Task OnInitializedAsync()
    {
        await ChangeLabel("资讯");
        await base.OnInitializedAsync();
    }

    private async Task ChangeLabel(string title)
    {
        label = title;

        var response = await http.GetAsync($"./rss/RecommendFeeds?label={label}");
        var result = await response.ReadAsObj<List<RecommendedFeed>>();
        if (result != null)
        {
            feeds = result;
        }

        StateHasChanged();
    }

    private async Task ToFeed(string url)
    {
        var json = await jsService.GetItem("user-wasm");
        var user = json.ToObj<UserResponse>();
        if (user == null)
        {
            await jsService.Alert("请先进行登录操作");
            return;
        }

        if (!http.DefaultRequestHeaders.TryGetValues("token", out var values))
        {
            http.DefaultRequestHeaders.Add("token", user!.Token);
        }
        var response = await http.PostAsJsonAsync("./rss/Subscribe", new string[] { url });
        var result = await response.ReadAsObj<Result<List<FeedOverview>>>();
        if (result.Data.IsNullOrEmpty())
        {
            await jsService.Alert("订阅失败");
            return;
        }

        var overview = result.Data.First();
        nav.NavigateTo($"./articles?id={overview.Id}&title={overview.Title}");
    }
}
