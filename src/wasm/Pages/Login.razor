@page "/login"

@using Resader.Common.Api.Request
@using Resader.Common.Api.Response
@using Resader.Common.Extensions

@inject HttpClient http
@inject IJSRuntime js
@inject JsService jsService
@inject NavigationManager nav

<form class="form">
    <div class="mb-3">
        <label for="login-mail" class="form-label">邮箱地址</label>
        <input type="email" class="form-control" id="login-mail" @bind="mail">
    </div>
    <div class="mb-3">
        <label for="login-password" class="form-label">密码</label>
        <input type="password" class="form-control" id="login-password" @bind="password">
    </div>
    <div class="btn-group button-groups" role="group">
        <button type="button" class="btn btn-outline-primary" @onclick="LogIn">登录</button>
        <button type="button" class="btn btn-outline-primary" @onclick="SignUp">注册</button>
    </div>
    <div class="mb-3 oauth">
        使用三方帐号登录：
        <img src="./github.svg" class="oauth-logo" @onclick="OauthGithub"/>
        <img src="./gitee.svg" class="oauth-logo" @onclick="OauthGitee"/>
    </div>
</form>

@code {
    private string mail = string.Empty;

    private string password = string.Empty;

    private async Task LogIn()
    {
        if (string.IsNullOrWhiteSpace(mail))
        {
            await jsService.Alert("请输入邮箱地址");
            return;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            await jsService.Alert("请输入密码");
            return;
        }

        var pwd = await js.InvokeAsync<string>("md5", password);
        var response = await http.PostAsJsonAsync("./User/Login", new LoginRequest
        {
            Mail = mail,
            Password = pwd
        });
        var result = await response.ReadAsObj<Result<UserResponse>>();
        if (result.Code != 0)
        {
            if (result.Code == 2)
            {
                await jsService.Alert("系统错误");
            }
            else
            {
                await jsService.Alert(result.Message);
            }
            return;
        }

        await jsService.SetItem("user-wasm", result.Data.ToJson());
        nav.NavigateTo("./");
    }

    private async Task SignUp()
    {
        if (string.IsNullOrWhiteSpace(mail))
        {
            await jsService.Alert("请输入邮箱地址");
            return;
        }
        if (string.IsNullOrWhiteSpace(password))
        {
            await jsService.Alert("请输入密码");
            return;
        }

        var pwd = await js.InvokeAsync<string>("md5", password);
        var response = await http.PostAsJsonAsync("./User/SignUp", new SignUpRequest
        {
            Mail = mail,
            Password = pwd
        });
        var result = await response.ReadAsObj<Result<UserResponse>>();
        if (result.Code != 0)
        {
            switch (result.Code)
            {
                case 2:
                    await jsService.Alert("系统错误");
                    return;
                case 101:
                    await jsService.Alert("邮箱已被注册");
                    return;
                default:
                    await jsService.Alert(result.Message);
                    return;
            }
        }

        await jsService.SetItem("user-wasm", result.Data.ToJson());
        nav.NavigateTo("./");
    }

    private void OauthGithub()
    {
        nav.NavigateTo("./opensecurity/oauth?service=github", true);
    }

    private void OauthGitee()
    {
        nav.NavigateTo("./opensecurity/oauth?service=gitee", true);
    }
}
