@page "/articles"

@using Resader.Common.Api.Response
@using Resader.Common.Extensions
@using Resader.Wasm.Extensions

@inject NavigationManager nav
@inject HttpClient http
@inject JsService jsService

<div>
    <NavHeader Title="@title" Operation="取消订阅" Operate="@Unsubscribe"></NavHeader>
    <List Load="@Load">
        @foreach (var article in articles)
        {
            if (!onlyShowUnread || !article.Read)
            {
                <LinkItem Title="@article.Title" Href="@article.Url" Summary="@article.Summary" Image="@article.Image"
                    Footer="@article.Published.ToString("yyyy-MM-dd HH:mm:ss")" Target="_blank" Click="@(() => Read(article.Id))"></LinkItem>
            }
        }
    </List>

    <Toast Id="articles-toast" @ref=toast Delay="800"></Toast>
</div>

@code {
    private string id = string.Empty;
    private string title = string.Empty;
    private UserResponse? user;
    private int page = 0;
    private List<ArticleResponse> articles = new List<ArticleResponse>();
    private bool finished;
    private bool onlyShowUnread;
    private Toast? toast;

    protected override async Task OnInitializedAsync()
    {
        id = nav.GetQueryParameter("id");
        title = nav.GetQueryParameter("title");
        var json = await jsService.GetItem("user-wasm");
        user = json.ToObj<UserResponse>();
        if (user == null)
        {
            nav.NavigateTo("./login");
            return;
        }

        bool.TryParse(await jsService.GetItem("onlyShowUnread"), out bool b);
        onlyShowUnread = b;

        await base.OnInitializedAsync();
    }

    private async Task Unsubscribe()
    {
        if (await jsService.Confirm($"确定取消订阅{title}？"))
        {
            if (!http.DefaultRequestHeaders.TryGetValues("token", out var values))
            {
                http.DefaultRequestHeaders.Add("token", user!.Token);
            }
            var response = await http.PostAsJsonAsync("./rss/Unsubscribe", new string[] { id });
            var result = await response.ReadAsObj<Result>();
            if (result?.Code == 0)
            {
                nav.NavigateTo("./");
            }
            else
            {
                await jsService.Alert("取消订阅失败");
            }
        }
    }

    private async Task Load()
    {
        if (finished)
        {
            return;
        }

        if (!http.DefaultRequestHeaders.TryGetValues("token", out var values))
        {
            http.DefaultRequestHeaders.Add("token", user!.Token);
        }
        var response = await http.GetAsync($"./rss/Articles?feedId={id}&page={page}&pageSize=30");
        if (response.IsSuccessStatusCode)
        {
            page++;
            var result = await response.ReadAsObj<Result<List<ArticleResponse>>>();
            await toast!.Show($"加载了{result.Data.Count}篇文章");
            if (result.Data.Count < 30)
            {
                finished = true;
            }
            articles.AddRange(result.Data);

            StateHasChanged();
        }
    }

    private Task Read(string id) => http.PostAsJsonAsync("./rss/read", new string[] { id });
}
